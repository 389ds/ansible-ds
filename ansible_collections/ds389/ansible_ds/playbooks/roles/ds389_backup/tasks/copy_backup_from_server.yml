---
- name: Fail on invalid ds389_backup_archive_path
  ansible.builtin.fail:
    msg: "ds389_backup_archive_path {{ ds389_backup_archive_path }} is not valid"
  when: ds389_backup_archive_path is not defined or
        ds389_backup_archive_path | length < 1

- name: Set controller destination directory
  ansible.builtin.set_fact:
    ds389_backup_controller_dir:
      "{{ ds389_backup_archive_controller_path | default(lookup('env', 'PWD')) }}/{{
        ds389_backup_archive_name_prefix | default(ansible_facts['fqdn']) }}_{{ ds389_backup_archive_path }}/"

- name: Get DS backup dir
  ansible.builtin.import_tasks: "{{ role_path }}/tasks/get_ds389_backup_dir.yml"

- name: Stat backup on server
  ansible.builtin.stat:
    path: "{{ ds389_backup_dir }}/{{ ds389_backup_archive_path }}"
  register: result_backup_stat

- name: Fail on missing backup directory
  ansible.builtin.fail:
    msg: "Unable to find backup {{ ds389_backup_archive_path }}"
  when: result_backup_stat.stat.isdir is not defined

- name: Get backup files to copy for "{{ ds389_backup_archive_path }}"
  ansible.builtin.shell:
    find . -type f | cut -d"/" -f 2
  args:
    chdir: "{{ ds389_backup_dir }}/{{ ds389_backup_archive_path }}"
  register: result_find_backup_files

- name: Copy server backup files to controller
  ansible.builtin.fetch:
    flat: true
    src: "{{ ds389_backup_dir }}/{{ ds389_backup_archive_path }}/{{ item }}"
    dest: "{{ ds389_backup_controller_dir }}"
  with_items:
    - "{{ result_find_backup_files.stdout_lines }}"

- name: Fix file modes for backup on controller
  ansible.builtin.file:
    dest: "{{ ds389_backup_controller_dir }}"
    mode: u=rwX,go=
    recurse: true
  delegate_to: localhost
  become: false
